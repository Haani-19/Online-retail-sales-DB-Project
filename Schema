
- Contains the Data Definition Language (DDL) scripts
- to create the tables for the Online Retail Sales Database.
- file format :schema.sql
- I Used SQLite to execute

- Create Customers Table
CREATE TABLE customers (
    customer_id INTEGER PRIMARY KEY AUTOINCREMENT, - SQLite uses INTEGER PRIMARY KEY AUTOINCREMENT for auto-incrementing IDs
    first_name VARCHAR(50) NOT NULL,
    last_name VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE NOT NULL,
    phone_number VARCHAR(20),
    address TEXT,
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP
);

- Create Products Table
CREATE TABLE products (
    product_id INTEGER PRIMARY KEY AUTOINCREMENT,
    product_name VARCHAR(255) NOT NULL,
    description TEXT,
    price DECIMAL(10, 2) NOT NULL,
    stock_quantity INTEGER NOT NULL,
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP
);

- Create Orders Table
CREATE TABLE orders (
    order_id INTEGER PRIMARY KEY AUTOINCREMENT,
    customer_id INTEGER NOT NULL,
    order_date DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
    total_amount DECIMAL(10, 2) NOT NULL,
    order_status VARCHAR(50) NOT NULL, - e.g., 'Pending', 'Processing', 'Shipped', 'Delivered', 'Cancelled'
    FOREIGN KEY (customer_id) REFERENCES customers(customer_id)
);

- Create Order_Items Table
CREATE TABLE order_items (
    order_item_id INTEGER PRIMARY KEY AUTOINCREMENT,
    order_id INTEGER NOT NULL,
    product_id INTEGER NOT NULL,
    quantity INTEGER NOT NULL,
    unit_price DECIMAL(10, 2) NOT NULL, - Price at the time of order, not current product price
    FOREIGN KEY (order_id) REFERENCES orders(order_id),
    FOREIGN KEY (product_id) REFERENCES products(product_id)
);

- Create Payments Table
CREATE TABLE payments (
    payment_id INTEGER PRIMARY KEY AUTOINCREMENT,
    order_id INTEGER NOT NULL,
    payment_date DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
    amount DECIMAL(10, 2) NOT NULL,
    payment_method VARCHAR(50) NOT NULL, - e.g., 'Credit Card', 'PayPal', 'Bank Transfer'
    transaction_id VARCHAR(100) UNIQUE, - Unique ID for the payment transaction
    payment_status VARCHAR(50) NOT NULL, - e.g., 'Completed', 'Pending', 'Failed', 'Refunded'
    FOREIGN KEY (order_id) REFERENCES orders(order_id)
);
