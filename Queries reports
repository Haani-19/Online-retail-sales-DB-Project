-- File:queries_reports.sql
-- Contains SQL queries and views for generating sales reports
--Includes a real world Innovation.

-- Query 1: Total Sales by Customer
-- Shows each customer's total spending across all their orders.
SELECT
    c.customer_id,
    c.first_name,
    c.last_name,
    c.email,
    SUM(o.total_amount) AS total_spent
FROM
    customers c
JOIN
    orders o ON c.customer_id = o.customer_id
GROUP BY
    c.customer_id, c.first_name, c.last_name, c.email
ORDER BY
    total_spent DESC;

-- Query 2: Top 5 Selling Products (by Quantity Sold)
-- Identifies the products that have been sold the most in terms of units.
SELECT
    p.product_name,
    SUM(oi.quantity) AS total_quantity_sold
FROM
    products p
JOIN
    order_items oi ON p.product_id = oi.product_id
GROUP BY
    p.product_name
ORDER BY
    total_quantity_sold DESC
LIMIT 5;

-- Query 3: Orders Placed in a Specific Date Range (e.g., July 2025)
-- Retrieves all orders and their customer details within a given period.
SELECT
    o.order_id,
    o.order_date,
    o.total_amount,
    o.order_status,
    c.first_name,
    c.last_name,
    c.email
FROM
    orders o
JOIN
    customers c ON o.customer_id = c.customer_id
WHERE
    o.order_date >= '2025-07-01 00:00:00' AND o.order_date < '2025-08-01 00:00:00'
ORDER BY
    o.order_date;

-- Query 4: Customer Details for Orders with Pending Payments
-- Helps identify customers whose orders might need follow-up regarding payment.
SELECT
    c.customer_id,
    c.first_name,
    c.last_name,
    c.email,
    o.order_id,
    o.total_amount AS order_total,
    p.amount AS payment_amount,
    p.payment_status
FROM
    customers c
JOIN
    orders o ON c.customer_id = o.customer_id
JOIN
    payments p ON o.order_id = p.order_id
WHERE
    p.payment_status = 'Pending';

-- Query 5: Detailed Order Information (Order, Customer, Products, Payment)
-- Provides a comprehensive view of a specific order, including all items and payment details.
SELECT
    o.order_id,
    o.order_date,
    o.total_amount AS order_total,
    o.order_status,
    c.first_name AS customer_first_name,
    c.last_name AS customer_last_name,
    c.email AS customer_email,
    p.product_name,
    oi.quantity,
    oi.unit_price,
    (oi.quantity * oi.unit_price) AS item_total,
    pay.payment_date,
    pay.amount AS payment_amount,
    pay.payment_method,
    pay.payment_status
FROM
    orders o
JOIN
    customers c ON o.customer_id = c.customer_id
JOIN
    order_items oi ON o.order_id = oi.order_id
JOIN
    products p ON oi.product_id = p.product_id
LEFT JOIN -- Use LEFT JOIN to include orders even if they don't have a payment recorded yet
    payments pay ON o.order_id = pay.order_id
ORDER BY
    o.order_id, p.product_name;

-- Query 6: Average Order Value (Innovation Query 1)
-- Calculates the average amount spent per order.
SELECT
    AVG(total_amount) AS average_order_value
FROM
    orders;

-- Query 7: High-Value Customers (Identifying potential 'Prime' candidates - Innovation Query 2)
-- Identifies customers whose total spending exceeds the overall average order value.
-- These customers could be targeted for loyalty programs or special offers.
SELECT
    c.customer_id,
    c.first_name,
    c.last_name,
    c.email,
    SUM(o.total_amount) AS total_spent
FROM
    customers c
JOIN
    orders o ON c.customer_id = o.customer_id
GROUP BY
    c.customer_id, c.first_name, c.last_name, c.email
HAVING
    SUM(o.total_amount) > (SELECT AVG(total_amount) FROM orders)
ORDER BY
    total_spent DESC;


-- View 1: Daily Sales Summary
-- Creates a reusable view to quickly get the total sales and number of orders per day.
CREATE VIEW DailySalesSummary AS
SELECT
    DATE(order_date) AS sales_date,
    COUNT(order_id) AS total_orders,
    SUM(total_amount) AS total_daily_sales
FROM
    orders
GROUP BY
    sales_date
ORDER BY
    sales_date;

-- Querying the DailySalesSummary View
SELECT * FROM DailySalesSummary;
